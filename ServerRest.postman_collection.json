{
	"info": {
		"_postman_id": "9e8d63d4-8a7b-4a2f-a321-ee6f269cc643",
		"name": "ServerRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Usuários",
			"item": [
				{
					"name": "POST - Cadastrar usuário",
					"item": [
						{
							"name": "Validar Cadastro com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"_id\", ambiente._id);\r",
											"\r",
											"pm.test('Validar status code igual a 201', function(){\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Sabrina Teste\",\r\n  \"email\": \"SabrinaTeste@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastro com sucesso SEM AUTH",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"noAuth_id\", ambiente._id);\r",
											"\r",
											"pm.test('Validar status code igual a 201', function(){\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Sabrina Teste\",\r\n  \"email\": \"SabrinaSemAuth@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastro com email já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Este email já está sendo usado\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Sabrina Teste\",\r\n  \"email\": \"SabrinaTeste@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastro sem email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().email\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"email é obrigatório\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"nome\": \"Fulano\",\r\n    \"password\": \"teste\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastro sem nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().nome\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"nome é obrigatório\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"beltrano@qa.com.br\",\r\n    \"password\": \"teste\",\r\n    \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastro sem senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().password\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"password é obrigatório\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Sabrina Teste\",\r\n  \"email\": \"SabrinaTeste@qa.com.br\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastro sem adm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().administrador\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"administrador é obrigatório\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Sabrina Teste\",\r\n  \"email\": \"SabrinaTeste@qa.com.br\",\r\n  \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastro com campos diferentes do esperado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().administrador\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"administrador deve ser 'true' ou 'false'\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().email\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"email deve ser um email válido\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().nome\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"nome não pode ficar em branco\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().password\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"password não pode ficar em branco\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"SabrinaTesteqa.com.br\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"trueeee\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET - Listar usuários cadstrados",
					"item": [
						{
							"name": "Validar Listar usuários cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": null,
											"disabled": true
										},
										{
											"key": "nome",
											"value": null,
											"disabled": true
										},
										{
											"key": "email",
											"value": null,
											"disabled": true
										},
										{
											"key": "password",
											"value": null,
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar usuários cadastrados por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios?_id={{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{_id}}"
										},
										{
											"key": "nome",
											"value": "",
											"disabled": true
										},
										{
											"key": "email",
											"value": "",
											"disabled": true
										},
										{
											"key": "password",
											"value": "",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar usuários cadastrados por id por nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios?nome=Sabrina Teste",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{_id}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Sabrina Teste"
										},
										{
											"key": "email",
											"value": "SabrinaTeste@qa.com.br",
											"disabled": true
										},
										{
											"key": "password",
											"value": "teste",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar usuários cadastrados por id por email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios?email=SabrinaTeste@qa.com.br",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{_id}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Sabrina Teste",
											"disabled": true
										},
										{
											"key": "email",
											"value": "SabrinaTeste@qa.com.br"
										},
										{
											"key": "password",
											"value": "teste",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar usuários cadastrados por id por senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios?password=teste",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{_id}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Sabrina Teste",
											"disabled": true
										},
										{
											"key": "email",
											"value": "SabrinaTeste@qa.com.br",
											"disabled": true
										},
										{
											"key": "password",
											"value": "teste"
										},
										{
											"key": "administrador",
											"value": "true",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar usuários cadastrados por id por adm true",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function () {\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function () {\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function () {\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios?administrador=true",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{_id}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Sabrina Teste",
											"disabled": true
										},
										{
											"key": "email",
											"value": "SabrinaTeste@qa.com.br",
											"disabled": true
										},
										{
											"key": "password",
											"value": "teste",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar usuários cadastrados por id por adm false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios?administrador=false",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{_id}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Sabrina Teste",
											"disabled": true
										},
										{
											"key": "email",
											"value": "SabrinaTeste@qa.com.br",
											"disabled": true
										},
										{
											"key": "password",
											"value": "teste",
											"disabled": true
										},
										{
											"key": "administrador",
											"value": "false"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET - Buscar usuários por ID",
					"item": [
						{
							"name": "Validar Buscar usuário por ID válido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().administrador\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().email\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().nome\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().password\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Buscar usuário sem ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().usuarios\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Buscar usuário por ID inválido",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"id não retornado\").to.eql(\"Usuário não encontrado\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/xxxxxx",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"xxxxxx"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL - Excluir usuário",
					"item": [
						{
							"name": "Validar Delete de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"id não retornado\").to.eql(\"Registro excluído com sucesso\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Delete de usuário sem usuario",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"id não retornado\").to.eql(\"Nenhum registro excluído\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Delete de usuário com carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Não é permitido excluir usuário com carrinho cadastrado\")\r",
											"})\r",
											"\r",
											"\r",
											"pm.test('Validar retorno de id', function(){\r",
											"    jasonData = pm.response.json().idCarrinho\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT - Editar usuário",
					"item": [
						{
							"name": "Validar cadastro de user por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"_id\", ambiente._id);\r",
											"\r",
											"pm.test('Validar status code igual a 201', function(){\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Sabrina Teste\",\r\n  \"email\": \"SabrinaTeste@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar cadastro de user por id com email já existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Registro alterado com sucesso\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Sabrina Teste\",\r\n  \"email\": \"SabrinaTeste@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/usuarios/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "POST - Realizar Login",
					"item": [
						{
							"name": "Validar login realizado com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"auth\", ambiente.authorization);\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"Login realizado\").to.eql(\"Login realizado com sucesso\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"SabrinaTeste@qa.com.br\",\r\n  \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar login realizado com sucesso sem adm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"noAuth\", ambiente.authorization);\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"Login realizado\").to.eql(\"Login realizado com sucesso\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"SabrinaSemAuth@qa.com.br\",\r\n  \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar login não realizado com email e/ou senha inválidos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 401', function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"Login não realizado\").to.eql(\"Email e/ou senha inválidos\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "x-api-key",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"SabrinaTest7e@qa.com.br\",\r\n  \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar login não realizado sem senha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().password\r",
											"    pm.expect(jasonData, \"Login não realizado\").to.eql(\"password é obrigatório\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "x-api-key",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"SabrinaTest7e@qa.com.br\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar login não realizado sem email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().email\r",
											"    pm.expect(jasonData, \"Login não realizado\").to.eql(\"email é obrigatório\")\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{auth}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "x-api-key",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n  \"password\": \"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "POST - Cadastrar produto",
					"item": [
						{
							"name": "Validar Cadastrar produto com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"id_produto\", ambiente._id);\r",
											"\r",
											"pm.test('Validar status code igual a 201', function(){\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Colar Luxo Ouro\",\r\n  \"preco\": 1000,\r\n  \"descricao\": \"colar\",\r\n  \"quantidade\": 26\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastrar produto com sucesso 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"id_produto2\", ambiente._id);\r",
											"\r",
											"pm.test('Validar status code igual a 201', function(){\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Colar Luxo Ouro 2\",\r\n  \"preco\": 1000,\r\n  \"descricao\": \"colar\",\r\n  \"quantidade\": 26\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastrar produto com nome ja existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Já existe produto com esse nome\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Colar Luxo Ouro\",\r\n  \"preco\": 1000,\r\n  \"descricao\": \"colar\",\r\n  \"quantidade\": 26\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastrar produto com Token ausente, inválido ou expirado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 401', function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Cadastrar produto Rota exclusiva para administradores",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 403', function(){\r",
											"    pm.response.to.have.status(403)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Rota exclusiva para administradores\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{noAuth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET - Listar produtos cadastrados",
					"item": [
						{
							"name": "Validar Listar produtos cadastrados cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().produtos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": null,
											"disabled": true
										},
										{
											"key": "nome",
											"value": null,
											"disabled": true
										},
										{
											"key": "preco",
											"value": null,
											"disabled": true
										},
										{
											"key": "descricao",
											"value": null,
											"disabled": true
										},
										{
											"key": "quantidade",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar produtos cadastrados cadastrados por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().produtos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos?_id={{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_produto}}"
										},
										{
											"key": "nome",
											"value": "",
											"disabled": true
										},
										{
											"key": "preco",
											"value": "",
											"disabled": true
										},
										{
											"key": "descricao",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidade",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar produtos cadastrados cadastrados nome",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().produtos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos?nome=Colar",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_produto}}",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "Colar"
										},
										{
											"key": "preco",
											"value": "",
											"disabled": true
										},
										{
											"key": "descricao",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidade",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar produtos cadastrados cadastrados por preco sem passar o valor",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().preco\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos?preco=",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "",
											"disabled": true
										},
										{
											"key": "preco",
											"value": ""
										},
										{
											"key": "descricao",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidade",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar produtos cadastrados cadastrados por preco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().produtos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos?preco=1000",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "",
											"disabled": true
										},
										{
											"key": "preco",
											"value": "1000"
										},
										{
											"key": "descricao",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidade",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar produtos cadastrados cadastrados por descricao",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().produtos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos?descricao=\"colar\"",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "",
											"disabled": true
										},
										{
											"key": "preco",
											"value": "",
											"disabled": true
										},
										{
											"key": "descricao",
											"value": "\"colar\""
										},
										{
											"key": "quantidade",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar produtos cadastrados cadastrados por quantidade",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de usuarios', function(){\r",
											"    jasonData = pm.response.json().produtos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos?quantidade=26",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos"
									],
									"query": [
										{
											"key": "_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "nome",
											"value": "",
											"disabled": true
										},
										{
											"key": "preco",
											"value": "",
											"disabled": true
										},
										{
											"key": "descricao",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidade",
											"value": "26"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET - Buscar produto por ID",
					"item": [
						{
							"name": "Validar busca de produto quando o produto é encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de nome', function(){\r",
											"    jasonData = pm.response.json().nome\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar busca de produto quando o produto não é encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos/xxxxxxxxxxx",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"xxxxxxxxxxx"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL - Excluir produto",
					"item": [
						{
							"name": "Validar excuir produto por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar excuir produto por id quando produto faz parte de carrinho",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar excuir produto por id com token ausente, inválido ou expirado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 401', function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar excuir produto por id qunado Rota exclusiva para administradores",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 403', function(){\r",
											"    pm.response.to.have.status(403)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Rota exclusiva para administradores\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{noAuth}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PUT - Edtar produto",
					"item": [
						{
							"name": "Validar cadastro de produto por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"id_produto\", ambiente._id);\r",
											"\r",
											"pm.test('Validar status code igual a 201', function(){\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Colar Luxo Ouro\",\r\n  \"preco\": 1000,\r\n  \"descricao\": \"colar\",\r\n  \"quantidade\": 26\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar edição de produto por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Registro alterado com sucesso\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Colar Luxo Ouro\",\r\n  \"preco\": 1000,\r\n  \"descricao\": \"colar\",\r\n  \"quantidade\": 26\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar cadastro de produto por id com nome já existente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Já existe produto com esse nome\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar cadastro de produto por id com token ausente, inválido ou expirado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 401', function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar cadastro de produto por id em Rota exclusiva para administradores",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 403', function(){\r",
											"    pm.response.to.have.status(403)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Rota exclusiva para administradores\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "{{noAuth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Carrinhos",
			"item": [
				{
					"name": "POST - Cadastrar carrinho",
					"item": [
						{
							"name": "Validar \t Cadastro com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"var ambiente = JSON.parse(responseBody);\r",
											"pm.environment.set(\"id_carrinho\", ambiente._id);\r",
											"\r",
											"pm.test('Validar status code igual a 201', function(){\r",
											"    pm.response.to.have.status(201)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Cadastro realizado com sucesso\")\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de client id', function(){\r",
											"    jasonData = pm.response.json()._id\r",
											"    pm.expect(jasonData, \"id não retornado\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id_produto}}\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"{{id_produto2}}\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/carrinhos",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar erros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Não é permitido ter mais de 1 carrinho\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{id_produto}}\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"{{id_produto2}}\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/carrinhos",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Token ausente, inválido ou expirado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 401', function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/carrinhos",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET - Listar carrinhos cadastrados",
					"item": [
						{
							"name": "Validar Listar carrinhos cadastrados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de carrinhos', function(){\r",
											"    jasonData = pm.response.json().carrinhos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "_id",
											"value": null,
											"disabled": true
										},
										{
											"key": "precoTotal",
											"value": null,
											"disabled": true
										},
										{
											"key": "quantidadeTotal",
											"value": null,
											"disabled": true
										},
										{
											"key": "idUsuario",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar carrinhos cadastrados por id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de carrinhos', function(){\r",
											"    jasonData = pm.response.json().carrinhos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos?_id={{id_carrinho}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "_id",
											"value": "{{id_carrinho}}"
										},
										{
											"key": "precoTotal",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidadeTotal",
											"value": "",
											"disabled": true
										},
										{
											"key": "idUsuario",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar carrinhos cadastrados por preço total",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de carrinhos', function(){\r",
											"    jasonData = pm.response.json().carrinhos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos?precoTotal=110000",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "precoTotal",
											"value": "110000"
										},
										{
											"key": "quantidadeTotal",
											"value": "",
											"disabled": true
										},
										{
											"key": "idUsuario",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar carrinhos cadastrados por quantidade total",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de carrinhos', function(){\r",
											"    jasonData = pm.response.json().carrinhos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos?quantidadeTotal=5",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "precoTotal",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidadeTotal",
											"value": "5"
										},
										{
											"key": "idUsuario",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Listar carrinhos cadastrados por user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidade', function(){\r",
											"    jasonData = pm.response.json().quantidade\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de carrinhos', function(){\r",
											"    jasonData = pm.response.json().carrinhos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos?idUsuario={{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos"
									],
									"query": [
										{
											"key": "_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "precoTotal",
											"value": "",
											"disabled": true
										},
										{
											"key": "quantidadeTotal",
											"value": "",
											"disabled": true
										},
										{
											"key": "idUsuario",
											"value": "{{_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET - Buscar carrinho por ID",
					"item": [
						{
							"name": "Validar \tCarrinho encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jasonData\r",
											"\r",
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de quantidadeTotal', function(){\r",
											"    jasonData = pm.response.json().quantidadeTotal\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de produtos', function(){\r",
											"    jasonData = pm.response.json().produtos\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\npm.test('Validar status code igual a 200', function(){\r\n    pm.response.to.have.status(200)\r\n})\r\n\r\npm.test('Validar retorno de produtos', function(){\r\n    jasonData = pm.response.json().produtos\r\n    pm.expect(jasonData, \"mensagem\").not.undefined\r\n})\r\n\r\npm.test('Validar retorno de preço', function(){\r\n    jasonData = pm.response.json().precoTotal\r\n    pm.expect(jasonData, \"mensagem\").not.undefined\r\n})\r\npm.test('Validar retorno de id', function(){\r\n    jasonData = pm.response.json().idUsuario\r\n    pm.expect(jasonData, \"mensagem\").not.undefined\r\n})",
									"options": {
										"raw": {
											"language": "javascript"
										}
									}
								},
								"url": {
									"raw": "{{url}}/carrinhos/{{id_carrinho}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos",
										"{{id_carrinho}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar \t Carrinho não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test('Validar status code igual a 400', function(){\r",
											"    pm.response.to.have.status(400)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos/xxxxxxxxxxx",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos",
										"xxxxxxxxxxx"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL - Excluir carrinho",
					"item": [
						{
							"name": "Validar  Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Não foi encontrado carrinho para esse usuário\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{noAuth}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/carrinhos/concluir-compra",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Token ausente, inválido ou expirado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 401', function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos/concluir-compra",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL -  Excluir carrinho e retornar produtos para estoque",
					"item": [
						{
							"name": "Validar  Registro excluído com sucesso | Não foi encontrado carrinho para esse usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/carrinhos/cancelar-compra",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Token ausente, inválido ou expirado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 401', function(){\r",
											"    pm.response.to.have.status(401)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/carrinhos/cancelar-compra",
									"host": [
										"{{url}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Extra",
			"item": [
				{
					"name": "DEL - Produtos",
					"item": [
						{
							"name": "Validar excuir produto por id com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").not.undefined\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/produtos/{{id_produto}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar excuir produto por id com sucesso 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"mensagem\").to.eql(\"Registro excluído com sucesso\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{auth}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/produtos/{{id_produto2}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"produtos",
										"{{id_produto2}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DEL - Usuarios",
					"item": [
						{
							"name": "Validar Delete de usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"id não retornado\").to.eql(\"Registro excluído com sucesso\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/{{_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validar Delete de usuário 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Validar status code igual a 200', function(){\r",
											"    pm.response.to.have.status(200)\r",
											"})\r",
											"\r",
											"pm.test('Validar retorno de mensagem', function(){\r",
											"    jasonData = pm.response.json().message\r",
											"    pm.expect(jasonData, \"id não retornado\").to.eql(\"Registro excluído com sucesso\")\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/usuarios/{{noAuth_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"usuarios",
										"{{noAuth_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}